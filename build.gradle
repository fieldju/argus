plugins {
    id 'groovy'
    id "org.springframework.boot" version "2.6.4"
    id "com.palantir.git-version" version "0.13.0"
    id "org.hidetake.ssh" version "2.10.1"
}

apply plugin: 'io.spring.dependency-management'

apply from: file('gradle/dependencies.gradle')
apply from: file('gradle/deploy.gradle')

bootJar {
    archiveName = 'sb-app.jar'
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

group = "com.fieldju.argus"
version = normalizedVersion()

springBoot {
    buildInfo {
        properties {
            name = 'Argus'
        }
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

String getFullVersion() {
    try {
        apply plugin: 'com.palantir.git-version'
        return gitVersion()
    } catch (Exception e) {
        project.logger.error(e.getMessage())
        return System.getProperty("version", "v0.0.0.dirty")
    }
}

String normalizedVersion() {
    String fullVersion = getFullVersion()
    logger.lifecycle("full version: ${String.valueOf(fullVersion)}")
    String normalized = fullVersion.split("-").first()
    def resolvedVersion
    if (project.hasProperty('stage') && project.stage == "true") {
        resolvedVersion = "$normalized-stage.${new Date().getTime()}"
    } else if (fullVersion.contains("dirty")) {
        resolvedVersion = "$normalized-dev.${new Date().getTime()}"
    } else {
        resolvedVersion = fullVersion
    }
    logger.lifecycle("Resolved version: ${resolvedVersion}")
    return resolvedVersion
}